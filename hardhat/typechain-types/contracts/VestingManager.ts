/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IVesting {
  export type VestingInfoStruct = {
    locked: BigNumberish;
    perBlock: BigNumberish;
    startingBlock: BigNumberish;
  };

  export type VestingInfoStructOutput = [
    locked: bigint,
    perBlock: bigint,
    startingBlock: bigint
  ] & { locked: bigint; perBlock: bigint; startingBlock: bigint };
}

export interface VestingManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addManager"
      | "batchCreateVestingSchedules"
      | "batchVest"
      | "createVestingSchedule"
      | "getVestingInfo"
      | "managers"
      | "owner"
      | "removeManager"
      | "token"
      | "transferOwnership"
      | "vestForBeneficiary"
      | "vestingPrecompile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BatchVestingCreated"
      | "ManagerAdded"
      | "ManagerRemoved"
      | "VestingScheduleCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchCreateVestingSchedules",
    values: [AddressLike[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVest",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createVestingSchedule",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "managers",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestForBeneficiary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingPrecompile",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchCreateVestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "batchVest", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "managers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestForBeneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingPrecompile",
    data: BytesLike
  ): Result;
}

export namespace BatchVestingCreatedEvent {
  export type InputTuple = [beneficiaries: BigNumberish];
  export type OutputTuple = [beneficiaries: bigint];
  export interface OutputObject {
    beneficiaries: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerAddedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ManagerRemovedEvent {
  export type InputTuple = [manager: AddressLike];
  export type OutputTuple = [manager: string];
  export interface OutputObject {
    manager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    amount: BigNumberish,
    duration: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    amount: bigint,
    duration: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    amount: bigint;
    duration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VestingManager extends BaseContract {
  connect(runner?: ContractRunner | null): VestingManager;
  waitForDeployment(): Promise<this>;

  interface: VestingManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addManager: TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;

  batchCreateVestingSchedules: TypedContractMethod<
    [
      beneficiaries: AddressLike[],
      amounts: BigNumberish[],
      durationInBlocks: BigNumberish,
      startBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  batchVest: TypedContractMethod<
    [beneficiaries: AddressLike[]],
    [void],
    "nonpayable"
  >;

  createVestingSchedule: TypedContractMethod<
    [
      beneficiary: AddressLike,
      totalAmount: BigNumberish,
      durationInBlocks: BigNumberish,
      startBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getVestingInfo: TypedContractMethod<
    [beneficiary: AddressLike],
    [
      [IVesting.VestingInfoStructOutput[], bigint] & {
        schedules: IVesting.VestingInfoStructOutput[];
        unvestedAmount: bigint;
      }
    ],
    "view"
  >;

  managers: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  removeManager: TypedContractMethod<
    [manager: AddressLike],
    [void],
    "nonpayable"
  >;

  token: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  vestForBeneficiary: TypedContractMethod<
    [beneficiary: AddressLike],
    [void],
    "nonpayable"
  >;

  vestingPrecompile: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchCreateVestingSchedules"
  ): TypedContractMethod<
    [
      beneficiaries: AddressLike[],
      amounts: BigNumberish[],
      durationInBlocks: BigNumberish,
      startBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchVest"
  ): TypedContractMethod<[beneficiaries: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createVestingSchedule"
  ): TypedContractMethod<
    [
      beneficiary: AddressLike,
      totalAmount: BigNumberish,
      durationInBlocks: BigNumberish,
      startBlock: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVestingInfo"
  ): TypedContractMethod<
    [beneficiary: AddressLike],
    [
      [IVesting.VestingInfoStructOutput[], bigint] & {
        schedules: IVesting.VestingInfoStructOutput[];
        unvestedAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "managers"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeManager"
  ): TypedContractMethod<[manager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestForBeneficiary"
  ): TypedContractMethod<[beneficiary: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "vestingPrecompile"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BatchVestingCreated"
  ): TypedContractEvent<
    BatchVestingCreatedEvent.InputTuple,
    BatchVestingCreatedEvent.OutputTuple,
    BatchVestingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerAdded"
  ): TypedContractEvent<
    ManagerAddedEvent.InputTuple,
    ManagerAddedEvent.OutputTuple,
    ManagerAddedEvent.OutputObject
  >;
  getEvent(
    key: "ManagerRemoved"
  ): TypedContractEvent<
    ManagerRemovedEvent.InputTuple,
    ManagerRemovedEvent.OutputTuple,
    ManagerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleCreated"
  ): TypedContractEvent<
    VestingScheduleCreatedEvent.InputTuple,
    VestingScheduleCreatedEvent.OutputTuple,
    VestingScheduleCreatedEvent.OutputObject
  >;

  filters: {
    "BatchVestingCreated(uint256)": TypedContractEvent<
      BatchVestingCreatedEvent.InputTuple,
      BatchVestingCreatedEvent.OutputTuple,
      BatchVestingCreatedEvent.OutputObject
    >;
    BatchVestingCreated: TypedContractEvent<
      BatchVestingCreatedEvent.InputTuple,
      BatchVestingCreatedEvent.OutputTuple,
      BatchVestingCreatedEvent.OutputObject
    >;

    "ManagerAdded(address)": TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;
    ManagerAdded: TypedContractEvent<
      ManagerAddedEvent.InputTuple,
      ManagerAddedEvent.OutputTuple,
      ManagerAddedEvent.OutputObject
    >;

    "ManagerRemoved(address)": TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;
    ManagerRemoved: TypedContractEvent<
      ManagerRemovedEvent.InputTuple,
      ManagerRemovedEvent.OutputTuple,
      ManagerRemovedEvent.OutputObject
    >;

    "VestingScheduleCreated(address,uint256,uint256)": TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
    VestingScheduleCreated: TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
  };
}
