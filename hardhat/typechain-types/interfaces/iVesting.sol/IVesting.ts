/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IVesting {
  export type VestingInfoStruct = {
    locked: BigNumberish;
    perBlock: BigNumberish;
    startingBlock: BigNumberish;
  };

  export type VestingInfoStructOutput = [
    locked: bigint,
    perBlock: bigint,
    startingBlock: bigint
  ] & { locked: bigint; perBlock: bigint; startingBlock: bigint };
}

export interface IVestingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "canAddVestingSchedule"
      | "forceRemoveVestingSchedule"
      | "forceVestedTransfer"
      | "getVestingSchedules"
      | "maxVestingSchedules"
      | "mergeSchedules"
      | "minVestedTransfer"
      | "vest"
      | "vestOther"
      | "vestedTransfer"
      | "vestingBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "VestingCompleted"
      | "VestingCreated"
      | "VestingUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "canAddVestingSchedule",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceRemoveVestingSchedule",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forceVestedTransfer",
    values: [AddressLike, AddressLike, IVesting.VestingInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingSchedules",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVestingSchedules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mergeSchedules",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minVestedTransfer",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "vest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vestOther",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestedTransfer",
    values: [AddressLike, IVesting.VestingInfoStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingBalance",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "canAddVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceRemoveVestingSchedule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceVestedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxVestingSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mergeSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minVestedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vestOther", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vestedTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingBalance",
    data: BytesLike
  ): Result;
}

export namespace VestingCompletedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingCreatedEvent {
  export type InputTuple = [account: AddressLike, scheduleIndex: BigNumberish];
  export type OutputTuple = [account: string, scheduleIndex: bigint];
  export interface OutputObject {
    account: string;
    scheduleIndex: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingUpdatedEvent {
  export type InputTuple = [account: AddressLike, unvested: BigNumberish];
  export type OutputTuple = [account: string, unvested: bigint];
  export interface OutputObject {
    account: string;
    unvested: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IVesting extends BaseContract {
  connect(runner?: ContractRunner | null): IVesting;
  waitForDeployment(): Promise<this>;

  interface: IVestingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  canAddVestingSchedule: TypedContractMethod<
    [
      account: AddressLike,
      locked: BigNumberish,
      perBlock: BigNumberish,
      startingBlock: BigNumberish
    ],
    [boolean],
    "view"
  >;

  forceRemoveVestingSchedule: TypedContractMethod<
    [target: AddressLike, scheduleIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  forceVestedTransfer: TypedContractMethod<
    [
      source: AddressLike,
      target: AddressLike,
      schedule: IVesting.VestingInfoStruct
    ],
    [boolean],
    "nonpayable"
  >;

  getVestingSchedules: TypedContractMethod<
    [account: AddressLike],
    [IVesting.VestingInfoStructOutput[]],
    "view"
  >;

  maxVestingSchedules: TypedContractMethod<[], [bigint], "view">;

  mergeSchedules: TypedContractMethod<
    [schedule1Index: BigNumberish, schedule2Index: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  minVestedTransfer: TypedContractMethod<[], [bigint], "view">;

  vest: TypedContractMethod<[], [boolean], "nonpayable">;

  vestOther: TypedContractMethod<
    [target: AddressLike],
    [boolean],
    "nonpayable"
  >;

  vestedTransfer: TypedContractMethod<
    [target: AddressLike, schedule: IVesting.VestingInfoStruct],
    [boolean],
    "nonpayable"
  >;

  vestingBalance: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "canAddVestingSchedule"
  ): TypedContractMethod<
    [
      account: AddressLike,
      locked: BigNumberish,
      perBlock: BigNumberish,
      startingBlock: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceRemoveVestingSchedule"
  ): TypedContractMethod<
    [target: AddressLike, scheduleIndex: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "forceVestedTransfer"
  ): TypedContractMethod<
    [
      source: AddressLike,
      target: AddressLike,
      schedule: IVesting.VestingInfoStruct
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVestingSchedules"
  ): TypedContractMethod<
    [account: AddressLike],
    [IVesting.VestingInfoStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxVestingSchedules"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "mergeSchedules"
  ): TypedContractMethod<
    [schedule1Index: BigNumberish, schedule2Index: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "minVestedTransfer"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "vest"
  ): TypedContractMethod<[], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "vestOther"
  ): TypedContractMethod<[target: AddressLike], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "vestedTransfer"
  ): TypedContractMethod<
    [target: AddressLike, schedule: IVesting.VestingInfoStruct],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vestingBalance"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;

  getEvent(
    key: "VestingCompleted"
  ): TypedContractEvent<
    VestingCompletedEvent.InputTuple,
    VestingCompletedEvent.OutputTuple,
    VestingCompletedEvent.OutputObject
  >;
  getEvent(
    key: "VestingCreated"
  ): TypedContractEvent<
    VestingCreatedEvent.InputTuple,
    VestingCreatedEvent.OutputTuple,
    VestingCreatedEvent.OutputObject
  >;
  getEvent(
    key: "VestingUpdated"
  ): TypedContractEvent<
    VestingUpdatedEvent.InputTuple,
    VestingUpdatedEvent.OutputTuple,
    VestingUpdatedEvent.OutputObject
  >;

  filters: {
    "VestingCompleted(address)": TypedContractEvent<
      VestingCompletedEvent.InputTuple,
      VestingCompletedEvent.OutputTuple,
      VestingCompletedEvent.OutputObject
    >;
    VestingCompleted: TypedContractEvent<
      VestingCompletedEvent.InputTuple,
      VestingCompletedEvent.OutputTuple,
      VestingCompletedEvent.OutputObject
    >;

    "VestingCreated(address,uint32)": TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;
    VestingCreated: TypedContractEvent<
      VestingCreatedEvent.InputTuple,
      VestingCreatedEvent.OutputTuple,
      VestingCreatedEvent.OutputObject
    >;

    "VestingUpdated(address,uint256)": TypedContractEvent<
      VestingUpdatedEvent.InputTuple,
      VestingUpdatedEvent.OutputTuple,
      VestingUpdatedEvent.OutputObject
    >;
    VestingUpdated: TypedContractEvent<
      VestingUpdatedEvent.InputTuple,
      VestingUpdatedEvent.OutputTuple,
      VestingUpdatedEvent.OutputObject
    >;
  };
}
